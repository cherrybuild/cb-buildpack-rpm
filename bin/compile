#!/bin/bash

# fail fast
set -o errexit
set -o nounset
set -o pipefail

indent() {
  sed -u 's/^/       /'
}

scriptname=$(basename $0)
case $# in
  2) :;;
  *) echo "$scriptname: usage: $scriptname BUILD_DIR CACHE_DIR" >&2; exit 2;;
esac

build_dir="$1"
cache_dir="$2"
ccache_max_size=50G
num_cpu=$(grep -c ^bogomips /proc/cpuinfo)
rpmbuild=$build_dir/.rpmbuild

export CCACHE_DIR=$cache_dir/ccache
export CC='ccache gcc'
export CXX='ccache g++'

echo "-----> Zeroing ccache stats"
ccache -M $ccache_max_size 2>&1 | indent
ccache -z 2>&1 | indent

echo "-----> Creating RPM build tree"
mkdir -p $rpmbuild/{BUILD,BUILDROOT,RPMS,SRPMS}
mkdir -p $cache_dir/rpmbuild/SOURCES

echo "-----> Downloading sources and patches"
spectool -l $build_dir/*.spec \
| awk '$2 ~ /^http|ftp/ {print $2}' \
| while read -r url
do
  file=$(basename $url)
  if [ -f $cache_dir/rpmbuild/SOURCES/$file ]
  then
    echo "       Copying from cache: $file"
    cp -f $cache_dir/rpmbuild/SOURCES/$file $build_dir/$file
  else
    echo "       Downloading: $url"
    curl -fsSL $url >$build_dir/$file 2>&1 | indent
    cp -f $build_dir/$file $cache_dir/rpmbuild/SOURCES/$file.new
    mv $cache_dir/rpmbuild/SOURCES/$file.new $cache_dir/rpmbuild/SOURCES/$file
  fi
done

if [ -f $build_dir/sources ]
then
  echo "-----> Verifying MD5 checksums"
  cd $build_dir >/dev/null 2>&1
  md5sum -c sources 2>&1 | indent
  cd - >/dev/null 2>&1
fi

echo "-----> Building RPM package"
cd $build_dir >/dev/null 2>&1
rpmbuild -bb \
  --define "_topdir $rpmbuild" \
  --define "_sourcedir $build_dir" \
  --define "_specdir $build_dir" \
  *.spec 2>&1 | indent
cd - >/dev/null 2>&1
